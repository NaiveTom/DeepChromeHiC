Data Structure
==============

This chapter will introduce the data structure of DeepChromeHiC.
That is, where all the folder meanings and data will be imported and output from.





legend
++++++

- ``Root directory``

	- ``Subdirectory level 1``
	
		- ``Subdirectory level 2``
		
			- ``Subdirectory level 3``
			
				- ``Subdirectory level 4``
				
					- ``Subdirectory level 5``
					
						It has not been used yet.
					
						- ``Subdirectory level 6``
						
							It has not been used yet.
	


	
		
Actual Structure
++++++++++++++++

- ``DeepChromeHiC``

	The ``root`` folder of this project. All files should be stored in this directory and its subdirectories.
	
	

	- ``DeepChromeHiC.py``

		Command line file, used to call all functions. It is the ``root program`` of this project.

	- ``data_preprocessing.py``
	
		Used to ``preprocess data``, generate ``npz`` and ``png`` files, use ``python3 DeepChromeHiC.py -p true -n [gene name]`` to call

	- ``model.py``

		Stored ``all models``, including: ``onehot_cnn_one_branch`` / ``onehot_cnn_two_branch`` / ``onehot_embedding_dense`` / ``onehot_embedding_cnn_one_branch`` / ``onehot_embedding_cnn_two_branch`` / ``onehot_dense`` / ``onehot_resnet18`` / ``onehot_resnet34`` / ``embedding_cnn_one_branch`` / ``embedding_cnn_two_branch`` / ``embedding_dense``

	- ``train.py``
	
		For ``training data``, this py file will call ``model.py`` to load the model. Use ``python3 DeepChromeHiC.py -m [model name] -t train -n [gene name]`` to call

	- ``test.py``

		For ``testing data``, this py file will call ``model.py`` to load the model. Use ``python3 DeepChromeHiC.py -m [model name] -t test -n [gene name]`` to call

	- ``log_filter.py``
	
		It is used to divide ``log.txt`` file, which is ``not part of the main program``. It needs ``log.txt``. It can be divided by running directly, and the divided data is written into ``log_filted.txt``. It is mainly used to exclude the timestamp and make it suitable The format of csv processing.

	- ``log.txt``

		Used to store the results in ``auc roc``, which is a file automatically generated and appended by ``test.py``
	
	- ``log_filted.txt``

		This file is a file obtained by processing ``log.txt`` by ``log_filter.py`` . The time stamp is removed and it is generated into a data format suitable for csv processing.

	- ``fig.py``

		This is a practical tool, used to generate ``charts`` from ``data``, and the generated charts are placed in the ``img`` folder.

	- ``embedding_matrix.npy``
	
		The ``DNA2VEC embedding`` file is generated using ``all hg19 gene data``, which contains 4097*100 dimensions (``6mer``, 2**6=4096, where the first line is the initial line, all 0), which is used to embedding gene data.
	
	
	
	- File path ``data``
	
		What is stored is genetic data and pre-training results.
	
		- File path ``Example: AD2.po``
		
			Example: AD2.po, specific gene folder
		
			- ``seq.anchor1.pos.txt`` 
				Put in the enhancer positive fragments

			- ``seq.anchor1.neg2.txt`` 
				Put in the enhancer negative fragments

			- ``seq.anchor2.pos.txt`` 
				Put in the promoter positive fragments

			- ``seq.anchor2.neg2.txt`` 
				Put in the promoter negative fragments
		
		
	
	- File path ``lib``
	
		The python3 module written by yourself is stored in this directory.
		
		- ``residual_block.py`` 
		
			This is the basic part of resnet, the resnet block.
			
		- ``resnet.py`` 
		
			This is a resnet file, including resnet18, resnet34, resnet50, resnet101, resnet152, you can modify more, but the memory overhead is too large.
		
		
		
	- File path ``h5_weights``
		
		This folder contains network weights in h5 format. Here, weights are stored instead of models, because this can reduce the volume occupied.
	
	- File path ``result``

		Used to store the test ``results``, which store the ``roc`` curve and ``auc`` area.
		There is a folder for each genome. Under the genome folder are various model folders, and under each model folder are image files.
	
	- File path ``img``
	
		It is used to hold the figures generated by ``fig.py``, and each figure is named after the ``gene's name``.
	
	- File path ``slurm``
	
		This folder is used to hold ``slurm scripts`` and ``slurm logs`` for supercomputer operation.
	
		- ``getsh.py``
		
			This py file is used to generate the sh script of slurm, which can be run in batches quickly.
		
		- File path ``log``
		
			Used to hold ``.err`` training error and prompt files and ``.log`` log files

	



.. image:: img/div.png